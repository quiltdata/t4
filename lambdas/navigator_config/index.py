import json

import boto3
from botocore.exceptions import ClientError
import cfnresponse

s3_client = boto3.client('s3')

def handler(event, context):
    if event['RequestType'] == 'Delete':
        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
        return

    try:
        props = event['ResourceProperties']
        config(props['DestBucket'], props['DestDir'], props['ConfigEsUrl'],
               props['ConfigApiUrl'], props['ConfigS3Bucket'],
               props['BucketTitle'], props['BucketIcon'], props['BucketDescription'],
               props['RegistryHost'])
        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
    except Exception as e:
        cfnresponse.send(event, context, cfnresponse.FAILED, {})
        raise

def print_json(source):
    """
    Pretty-print config as JSON.
    """
    return json.dumps(source, sort_keys=True, indent=4, separators=(',', ': '))

def update_config(existing, autogenerated):
    """
    Update existing config with new autogenerated config.

    Only inspects top-level keys.

    Return True if keys were added to the existing config, False otherwise.
    """
    existing_keys = existing.keys()
    updated = False
    for key in autogenerated.keys():
        if key not in existing_keys:
            existing[key] = autogenerated[key]
            updated = True

    return updated

def autogenerate_configs(es_url, api_url, s3_bucket,
                         bucket_title, bucket_icon, bucket_description,
                         registry_host, region):
    """
    Generates default configs.
    """
    bucket_config = {
        'name': s3_bucket,
        'title': bucket_title,
        'icon': bucket_icon,
        'description': bucket_description,
        'searchEndpoint': es_url,
        'apiGatewayEndpoint': api_url,
        'region': region
    }

    federation = {
        'buckets': [
            bucket_config
        ]
    }

    # ensure host has no leading or trailing slashes
    registry_host = registry_host.strip('/')

    catalog_config = {
        'federations': [
            '/federation.json'
        ],
        'suggestedBuckets': [
            s3_bucket
        ],
        'apiGatewayEndpoint': api_url,
        'sentryDSN': '',
        'alwaysRequiresAuth': True,
        'defaultBucket': s3_bucket,
        'guestCredentials': {
            'accessKeyId': '',
            'secretAccessKey': ''
        },
        'registryUrl': 'https://' + registry_host + '/',
        'signInRedirect': '/',
        'signOutRedirect': '/'
    }

    return (federation, catalog_config)

def config(dest_bucket, dest_dir, es_url, api_url, s3_bucket,
           bucket_title, bucket_icon, bucket_description,
           registry_host):

    def get_existing(key_name):
        """
        Get existing config if it exists, otherwise return a new empty dict.
        """
        try:
            response = s3_client.get_object(Bucket=dest_bucket, Key=key_name)
            return json.load(response['Body'])
        except ClientError as e:
            if e.response['Error']['Code'] == "NoSuchKey":
                return {}
            raise e

    region = boto3.session.Session().region_name

    existing_catalog_config = get_existing('config.json')
    existing_federation = get_existing('federation.json')
    auto_federation, auto_config = autogenerate_configs(
        es_url, api_url, s3_bucket,
        bucket_title, bucket_icon, bucket_description,
        registry_host, region
    )

    federation_was_updated = update_config(existing_federation, auto_federation)
    if federation_was_updated:
        s3_client.put_object(
            ACL='public-read',
            Body=print_json(existing_federation),
            Bucket=dest_bucket,
            Key=dest_dir + 'federation.json',
            ContentType='application/json'
        )

    catalog_config_was_updated = update_config(existing_catalog_config, auto_config)
    if catalog_config_was_updated:
        s3_client.put_object(
            ACL='public-read',
            Body=print_json(existing_catalog_config),
            Bucket=dest_bucket,
            Key=dest_dir + 'config.json',
            ContentType='application/json'
        )
