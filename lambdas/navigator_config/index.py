"""
navigator-config

Initializes and updates catalog config files
"""
import json

import boto3
from botocore.exceptions import ClientError
import cfnresponse

S3_CLIENT = boto3.client('s3')

def handler(event, context):
    """
    top-level handler for CloudFormation custom resource protocol
    """
    if event['RequestType'] == 'Delete':
        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
        return

    props = event['ResourceProperties']

    es_url = props['ConfigEsUrl']
    api_endpoint = props['ConfigApiUrl']
    data_bucket = props['ConfigS3Bucket']
    config_bucket = props['DestBucket']
    config_dir = props['DestDir']
    bucket_title = props['BucketTitle']
    bucket_icon = props['BucketIcon']
    bucket_description = props['BucketDescription']
    registry_host = props['RegistryHost']
    mixpanel_token = props['MixPanelToken']
    sentry_dsn = "https://cfde44007c3844aab3d1ee3f0ba53a1a@sentry.io/1410550"

    region = boto3.session.Session().region_name

    if event['RequestType'] == 'Create':
        # stack create
        try:
            create_configs(
                es_url=es_url,
                api_endpoint=api_endpoint,
                data_bucket=data_bucket,
                config_bucket=config_bucket,
                config_dir=config_dir,
                bucket_title=bucket_title,
                bucket_icon=bucket_icon,
                bucket_description=bucket_description,
                registry_host=registry_host,
                mixpanel_token=mixpanel_token,
                sentry_dsn=sentry_dsn,
                region=region
            )
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            return
        except Exception:
            cfnresponse.send(event, context, cfnresponse.FAILED, {})
            raise

    # The only case left is event['RequestType'] == 'Update'
    try:
        update_configs(
            es_url=es_url,
            api_endpoint=api_endpoint,
            data_bucket=data_bucket,
            config_bucket=config_bucket,
            config_dir=config_dir,
            bucket_title=bucket_title,
            bucket_icon=bucket_icon,
            bucket_description=bucket_description,
            registry_host=registry_host,
            mixpanel_token=mixpanel_token,
            sentry_dsn=sentry_dsn,
            region=region
        )
        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
    except Exception:
        cfnresponse.send(event, context, cfnresponse.FAILED, {})
        raise

def print_json(source):
    """
    Pretty-print config as JSON.
    """
    return json.dumps(source, sort_keys=True, indent=4, separators=(',', ': '))

def update_config(existing, autogenerated):
    """
    Update existing config with new autogenerated config.

    Only inspects top-level keys.

    Return True if keys were added to the existing config, False otherwise.
    """
    existing_keys = existing.keys()
    updated = False
    for key in autogenerated.keys():
        if key not in existing_keys:
            existing[key] = autogenerated[key]
            updated = True

    return updated

def autogenerate_configs(*, es_url, api_endpoint, data_bucket, bucket_title,
                         bucket_icon, bucket_description, registry_host,
                         mixpanel_token, sentry_dsn, region):
    """
    Generates default configs.

    * is an unused varargs parameter, which ensures all the rest of the parameters
        are kwargs-only
    """
    bucket_config = {
        'name': data_bucket,
        'title': bucket_title,
        'icon': bucket_icon,
        'description': bucket_description,
        'searchEndpoint': es_url,
        'apiGatewayEndpoint': api_endpoint,
        'region': region
    }

    federation = {
        'buckets': [
            bucket_config
        ]
    }

    # ensure host has no leading or trailing slashes
    registry_host = registry_host.strip('/')

    catalog_config = {
        'federations': [
            '/federation.json'
        ],
        'suggestedBuckets': [
            data_bucket
        ],
        'apiGatewayEndpoint': api_endpoint,
        'alwaysRequiresAuth': True,
        'defaultBucket': data_bucket,
        'guestCredentials': {
            'accessKeyId': '',
            'secretAccessKey': ''
        },
        'registryUrl': 'https://' + registry_host, # no trailing /
        'signInRedirect': '/',
        'signOutRedirect': '/',
        'sentryDSN': sentry_dsn,
        'mixPanelToken': mixpanel_token
    }

    return (federation, catalog_config)

def update_configs(*, es_url, api_endpoint, data_bucket, config_bucket,
                   config_dir, bucket_title, bucket_icon, bucket_description,
                   registry_host, mixpanel_token, sentry_dsn, region):
    """
    Handles updating existing configs
    """
    def get_existing(key_name):
        """
        Get existing config if it exists, otherwise return a new empty dict.
        """
        try:
            response = S3_CLIENT.get_object(Bucket=config_bucket, Key=key_name)
            return json.load(response['Body'])
        except ClientError as ex:
            if ex.response['Error']['Code'] == "NoSuchKey":
                return {}
            raise ex

    region = boto3.session.Session().region_name

    existing_catalog_config = get_existing('config.json')
    existing_federation = get_existing('federation.json')
    auto_federation, auto_config = autogenerate_configs(
        es_url=es_url,
        api_endpoint=api_endpoint,
        data_bucket=data_bucket,
        bucket_title=bucket_title,
        bucket_icon=bucket_icon,
        bucket_description=bucket_description,
        registry_host=registry_host,
        mixpanel_token=mixpanel_token,
        sentry_dsn=sentry_dsn,
        region=region
    )

    federation_was_updated = update_config(existing_federation, auto_federation)
    if federation_was_updated:
        S3_CLIENT.put_object(
            ACL='public-read',
            Body=print_json(existing_federation),
            Bucket=config_bucket,
            Key=config_dir + 'federation.json',
            ContentType='application/json'
        )

    catalog_config_was_updated = update_config(existing_catalog_config, auto_config)
    if catalog_config_was_updated:
        S3_CLIENT.put_object(
            ACL='public-read',
            Body=print_json(existing_catalog_config),
            Bucket=config_bucket,
            Key=config_dir + 'config.json',
            ContentType='application/json'
        )

def create_configs(*, es_url, api_endpoint, data_bucket, config_bucket,
                   config_dir, bucket_title, bucket_icon, bucket_description,
                   registry_host, mixpanel_token, sentry_dsn, region):
    """
    Autogenerates configs and writes them to destination bucket
    """
    auto_federation, auto_config = autogenerate_configs(
        es_url=es_url,
        api_endpoint=api_endpoint,
        data_bucket=data_bucket,
        bucket_title=bucket_title,
        bucket_icon=bucket_icon,
        bucket_description=bucket_description,
        registry_host=registry_host,
        mixpanel_token=mixpanel_token,
        sentry_dsn=sentry_dsn,
        region=region
    )

    S3_CLIENT.put_object(
        ACL='public-read',
        Body=print_json(auto_federation),
        Bucket=config_bucket,
        Key=config_dir + 'federation.json',
        ContentType='application/json'
    )

    S3_CLIENT.put_object(
        ACL='public-read',
        Body=print_json(auto_config),
        Bucket=config_bucket,
        Key=config_dir + 'config.json',
        ContentType='application/json'
    )
