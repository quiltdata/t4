"""
navigator-config

Initializes and updates catalog config files
"""
import json

import boto3
from botocore.exceptions import ClientError
import cfnresponse

S3_CLIENT = boto3.client('s3')

SENTRY_DSN = "https://cfde44007c3844aab3d1ee3f0ba53a1a@sentry.io/1410550"

def handler(event, context):
    """
    top-level handler for CloudFormation custom resource protocol
    """
    if event['RequestType'] == 'Delete':
        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
        return

    props = event['ResourceProperties']

    if event['RequestType'] == 'Create':
        # stack create
        try:
            create_configs(**props)
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            return
        except Exception:
            cfnresponse.send(event, context, cfnresponse.FAILED, {})
            raise

    # The only case left is event['RequestType'] == 'Update'
    try:
        update_configs(**props)
        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
    except Exception:
        cfnresponse.send(event, context, cfnresponse.FAILED, {})
        raise

def print_json(source):
    """
    Pretty-print config as JSON.
    """
    return json.dumps(source, sort_keys=True, indent=4, separators=(',', ': '))

def update_config(existing, autogenerated):
    """
    Update existing config with new autogenerated config.

    Only inspects top-level keys.

    Return True if keys were added to the existing config, False otherwise.
    """
    existing_keys = existing.keys()
    updated = False
    for key in autogenerated.keys():
        if key not in existing_keys:
            existing[key] = autogenerated[key]
            updated = True

    return updated

def autogenerate_configs(**kwargs):
    """
    Generates default configs.
    """
    bucket_config = {
        'name': kwargs['ConfigS3Bucket'],
        'title': kwargs['BucketTitle'],
        'icon': kwargs['BucketIcon'],
        'description': kwargs['BucketDescription'],
        'searchEndpoint': kwargs['ConfigEsUrl'],
        'apiGatewayEndpoint': kwargs['ConfigApiUrl'],
        'region': kwargs['region']
    }

    federation = {
        'buckets': [
            bucket_config
        ]
    }

    # ensure host has no leading or trailing slashes
    registry_host = kwargs['RegistryHost'].strip('/')

    catalog_config = {
        'federations': [
            '/federation.json'
        ],
        'suggestedBuckets': [
            kwargs['ConfigS3Bucket']
        ],
        'apiGatewayEndpoint': kwargs['ConfigApiUrl'],
        'sentryDSN': '',
        'alwaysRequiresAuth': True,
        'defaultBucket': kwargs['ConfigS3Bucket'],
        'guestCredentials': {
            'accessKeyId': '',
            'secretAccessKey': ''
        },
        'registryUrl': 'https://' + registry_host, # no trailing /
        'signInRedirect': '/',
        'signOutRedirect': '/',
        'sentryDSN': SENTRY_DSN,
        'mixPanelToken': kwargs['MixPanelToken']
    }

    return (federation, catalog_config)

def update_configs(**kwargs):
    """
    Handles updating existing configs
    """
    def get_existing(key_name):
        """
        Get existing config if it exists, otherwise return a new empty dict.
        """
        try:
            response = S3_CLIENT.get_object(Bucket=kwargs['DestBucket'], Key=key_name)
            return json.load(response['Body'])
        except ClientError as ex:
            if ex.response['Error']['Code'] == "NoSuchKey":
                return {}
            raise ex

    region = boto3.session.Session().region_name

    existing_catalog_config = get_existing('config.json')
    existing_federation = get_existing('federation.json')
    auto_federation, auto_config = autogenerate_configs(**{'region': region, **kwargs})

    federation_was_updated = update_config(existing_federation, auto_federation)
    if federation_was_updated:
        S3_CLIENT.put_object(
            ACL='public-read',
            Body=print_json(existing_federation),
            Bucket=kwargs['DestBucket'],
            Key=kwargs['DestDir'] + 'federation.json',
            ContentType='application/json'
        )

    catalog_config_was_updated = update_config(existing_catalog_config, auto_config)
    if catalog_config_was_updated:
        S3_CLIENT.put_object(
            ACL='public-read',
            Body=print_json(existing_catalog_config),
            Bucket=kwargs['DestBucket'],
            Key=kwargs['DestDir'] + 'config.json',
            ContentType='application/json'
        )

def create_configs(**kwargs):
    """
    Autogenerates configs and writes them to destination bucket
    """
    region = boto3.session.Session().region_name

    auto_federation, auto_config = autogenerate_configs(**{'region': region, **kwargs})

    S3_CLIENT.put_object(
        ACL='public-read',
        Body=print_json(auto_federation),
        Bucket=kwargs['DestBucket'],
        Key=kwargs['DestDir'] + 'federation.json',
        ContentType='application/json'
    )

    S3_CLIENT.put_object(
        ACL='public-read',
        Body=print_json(auto_config),
        Bucket=kwargs['DestBucket'],
        Key=kwargs['DestDir'] + 'config.json',
        ContentType='application/json'
    )
