AWSTemplateFormatVersion: 2010-09-09

Parameters:
  QuiltBucketName:
    Type: String
    MinLength: 3
    Description: Name of the existing S3 bucket that Quilt will use. Refer to the installation instructions for details.
  ConfigBucketName:
    Type: String
    MinLength: 3
    Description: Name for a new bucket, created by the stack, where Quilt will store configuration files
  QuiltWebHost:
    Type: String
    MinLength: 1
    Description: Domain name where users can access Quilt. Must match CertificateArn.
  CertificateArn:
    Type: String
    Description: ARN for SSL certificate for QuiltWebHost, from AWS Certificate Manager (arn:aws:...)
    AllowedPattern: ^arn:aws:acm:.*$
  Users:
    Type: CommaDelimitedList
    Description: Required, comma-separated list of ARNs for IAM users who can search QuiltBucket. NOTE - Users with search access can see the contents of all indexed documents. Only include trusted users.

Mappings:
  VersionMap:
    # initializes config.js and config.json for static website
    navigator-config:
      hash: 19dee98
    nbconvert:
      hash: f0cc75b
    # static website content
    navigator:
      hash: c842508
    indexer:
      hash: bf2c4fb
    put-mappings:
      hash: 76df9d0

Resources:

  # Search

  Search:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Ref AWS::StackName
      ElasticsearchVersion: 6.3
      ElasticsearchClusterConfig:
        InstanceCount: 1
        InstanceType: t2.small.elasticsearch
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
              - !GetAtt SearchHandlerRole.Arn
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}/*"
            Action:
              - "es:*"
          - Effect: Allow
            Principal:
              AWS: !Ref Users
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}/*"
            Action:
              - "es:ESHttpGet"
          - Effect: Allow
            Principal:
              AWS: !Ref Users
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}/drive/_doc/_search*"
            Action:
              - "es:ESHttpPost"
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: "false"

  SearchHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-search-lambda"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            Resource: !Sub 'arn:aws:s3:::${QuiltBucketName}/*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  SearchHandler:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "lam.handler"
      Role: !GetAtt SearchHandlerRole.Arn
      Runtime: "python3.6"
      Timeout: 10
      MemorySize: 1024
      Environment:
        Variables:
          # TODO Calvin: rename to ESHost, drop https://, and modify lambdas
          ES_URL: !Sub "https://${Search.DomainEndpoint}"
      Code:
        S3Bucket: !Sub "quilt-lambda-${AWS::Region}"
        S3Key: !Sub
          - "indexer/${Hash}.zip"
          - Hash: !FindInMap [VersionMap, "indexer", "hash"]

  SearchMappings:
    Type: Custom::ESMappingsSetter
    DependsOn:
      - Search
    Properties:
      ServiceToken: !GetAtt SearchMappingsLambda.Arn
      ES_URL: !Sub "https://${Search.DomainEndpoint}"

  SearchMappingsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt SearchHandlerRole.Arn
      Timeout: 10
      Runtime: python3.6
      Handler: put_mappings.handler
      Code:
        S3Bucket: !Sub "quilt-lambda-${AWS::Region}"
        S3Key: !Sub
          - "put_mappings/${Hash}.zip"
          - Hash: !FindInMap [VersionMap, "put-mappings", "hash"]

  # Bucket Notifications

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref SearchHandler
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${QuiltBucketName}"

  NotificationBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref QuiltBucketName
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action:
            - 's3:PutBucketNotification'
            Resource: !Sub "arn:aws:s3:::${QuiltBucketName}"
            Principal:
              AWS: !GetAtt NotificationConfigurationRole.Arn

  NotificationConfigurationCustomResource:
    Type: Custom::S3BucketConfiguration
    DependsOn:
      - BucketPermission
      - NotificationBucketPolicy
    Properties:
      Bucket: !Ref QuiltBucketName
      ServiceToken: !GetAtt NotificationConfigurationLambda.Arn
      NotificationConfiguration:
        LambdaFunctionConfigurations:
        - Events: ['s3:ObjectCreated:*', 's3:ObjectRemoved:*']
          LambdaFunctionArn: !GetAtt SearchHandler.Arn

  NotificationConfigurationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  NotificationConfigurationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt NotificationConfigurationRole.Arn
      Code:
        # This inline lambda has one job, will likely never change,
        #   and depends on cfn-response which only comes free if it's an inline lambda
        # it's a javascript lambda rather than a python lambda because it came from StackOverflow
        # https://stackoverflow.com/questions/38752985/create-a-lambda-notification-in-an-s3-bucket-with-cloudformation
        ZipFile: |
          var response = require('cfn-response');
          var AWS = require('aws-sdk');
          var s3 = new AWS.S3();
          exports.handler = function(event, context) {
            console.log('changing bucket notification settings');
            var respond = (e) => response.send(event, context, e ? response.FAILED : response.SUCCESS, e ? e : {});
            process.on('uncaughtException', e=>respond(e));
            var params = event.ResourceProperties;
            delete params.ServiceToken;
            if (event.RequestType === 'Delete') {
              params.NotificationConfiguration = {};
              s3.putBucketNotificationConfiguration(params).promise()
                .then((data)=>respond())
                .catch((e)=>respond(e));
            } else {
              s3.putBucketNotificationConfiguration(params).promise()
                .then((data)=>respond())
                .catch((e)=>respond(e));
            }
          };
      Timeout: 30
      Runtime: nodejs4.3

  # API

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName

  # Preview

  PreviewRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-preview"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  PreviewHandler:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt PreviewRole.Arn
      Runtime: "python3.6"
      Timeout: 30
      MemorySize: 512
      Code:
        S3Bucket: !Sub "quilt-lambda-${AWS::Region}"
        S3Key: !Sub
          - "nbconvert/${Hash}.zip"
          - Hash: !FindInMap [VersionMap, "nbconvert", "hash"]

  PreviewResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt [Api, RootResourceId]
      PathPart: "preview"

  PreviewMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref PreviewResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreviewHandler.Arn}/invocations"

  PreviewPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt [PreviewHandler, Arn]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*"

  ApiDeployment:
    DependsOn: PreviewMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment

  # Navigator

  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ConfigBucketName

  NavigatorInitRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-navigator-init"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - s3:Put*
            Resource: !Sub 'arn:aws:s3:::${ConfigBucketName}/*'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  NavigatorInitHandler:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: !GetAtt NavigatorInitRole.Arn
      Runtime: "python3.6"
      Timeout: 30
      MemorySize: 256
      Code:
        S3Bucket: !Sub "quilt-lambda-${AWS::Region}"
        S3Key: !Sub
          - "navigator_config/${Hash}.zip"
          - Hash: !FindInMap [VersionMap, "navigator-config", "hash"]

  NavigatorInit:
    Type: Custom::S3Sync
    Properties:
      ServiceToken: !GetAtt NavigatorInitHandler.Arn
      DestBucket: !Ref ConfigBucketName
      DestDir: ""
      ConfigEsUrl: !Sub "https://${Search.DomainEndpoint}"
      ConfigApiUrl: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod"
      ConfigS3Bucket: !Ref QuiltBucketName
      Version: !FindInMap [VersionMap, "navigator-config", "hash"]  # Not actually used, but triggers an update

  Navigator:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Ref QuiltWebHost
        DefaultCacheBehavior:
          TargetOriginId: default
          Compress: true
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
        - PathPattern: /config.js*
          TargetOriginId: config
          DefaultTTL: 300
          Compress: true
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
        - PathPattern: /index.html
          TargetOriginId: default
          DefaultTTL: 300
          Compress: true
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
        - Id: default
          DomainName: quilt-web-public.s3.amazonaws.com
          OriginPath: !Sub
            - "/navigator/${Hash}"
            - Hash: !FindInMap [VersionMap, "navigator", "hash"]
          S3OriginConfig:
            OriginAccessIdentity: ""
        - Id: config
          DomainName: !GetAtt ConfigBucket.DomainName
          S3OriginConfig:
            OriginAccessIdentity: ""
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
        # Redirect 404/403 to /index.html in order for the single-page app to work
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html

Outputs:
  CloudFrontDomain:
    Description: "DNS name of the CloudFront, to be used name as CNAME for the navigator website"
    Value: !GetAtt [ Navigator, DomainName ]
